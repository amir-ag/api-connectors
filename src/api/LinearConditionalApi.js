/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.BybitApi) {
      root.BybitApi = {};
    }
    root.BybitApi.LinearConditionalApi = factory(root.BybitApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * LinearConditional service.
   * @module api/LinearConditionalApi
   * @version 0.2.10
   */

  /**
   * Constructs a new LinearConditionalApi. 
   * @alias module:api/LinearConditionalApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the linearConditionalCancel operation.
     * @callback module:api/LinearConditionalApi~linearConditionalCancelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel Active Order
     * This will cancel linear active order
     * @param {Object} opts Optional parameters
     * @param {String} opts.stopOrderId 
     * @param {String} opts.orderLinkId 
     * @param {String} opts.symbol 
     * @param {module:api/LinearConditionalApi~linearConditionalCancelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.linearConditionalCancel = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'stop_order_id': opts['stopOrderId'],
        'order_link_id': opts['orderLinkId'],
        'symbol': opts['symbol']
      };

      var authNames = ['apiKey', 'apiSignature', 'timestamp'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/private/linear/stop-order/cancel', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the linearConditionalCancelAll operation.
     * @callback module:api/LinearConditionalApi~linearConditionalCancelAllCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel all stop orders.
     * @param {String} symbol Contract type.
     * @param {module:api/LinearConditionalApi~linearConditionalCancelAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.linearConditionalCancelAll = function(symbol, callback) {
      var postBody = null;

      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling linearConditionalCancelAll");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'symbol': symbol
      };

      var authNames = ['apiKey', 'apiSignature', 'timestamp'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/private/linear/stop-order/cancel-all', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the linearConditionalGetOrders operation.
     * @callback module:api/LinearConditionalApi~linearConditionalGetOrdersCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get linear Stop Orders
     * This will get linear active orders
     * @param {Object} opts Optional parameters
     * @param {String} opts.stopOrderId 
     * @param {String} opts.orderLinkId 
     * @param {String} opts.symbol 
     * @param {String} opts.order 
     * @param {String} opts.page 
     * @param {String} opts.limit 
     * @param {String} opts.stopOrderStatus 
     * @param {module:api/LinearConditionalApi~linearConditionalGetOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.linearConditionalGetOrders = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'stop_order_id': opts['stopOrderId'],
        'order_link_id': opts['orderLinkId'],
        'symbol': opts['symbol'],
        'order': opts['order'],
        'page': opts['page'],
        'limit': opts['limit'],
        'stop_order_status': opts['stopOrderStatus'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey', 'apiSignature', 'timestamp'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/private/linear/stop-order/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the linearConditionalNew operation.
     * @callback module:api/LinearConditionalApi~linearConditionalNewCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create linear stop Order
     * This will create linear stop order
     * @param {Object} opts Optional parameters
     * @param {String} opts.symbol 
     * @param {String} opts.side 
     * @param {String} opts.orderType 
     * @param {Number} opts.qty 
     * @param {Number} opts.price 
     * @param {Number} opts.basePrice 
     * @param {Number} opts.stopPx 
     * @param {String} opts.timeInForce 
     * @param {String} opts.triggerBy 
     * @param {Boolean} opts.reduceOnly 
     * @param {Boolean} opts.closeOnTrigger 
     * @param {String} opts.orderLinkId 
     * @param {Number} opts.takeProfit 
     * @param {Number} opts.stopLoss 
     * @param {String} opts.tpTriggerBy 
     * @param {String} opts.slTriggerBy 
     * @param {module:api/LinearConditionalApi~linearConditionalNewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.linearConditionalNew = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'symbol': opts['symbol'],
        'side': opts['side'],
        'order_type': opts['orderType'],
        'qty': opts['qty'],
        'price': opts['price'],
        'base_price': opts['basePrice'],
        'stop_px': opts['stopPx'],
        'time_in_force': opts['timeInForce'],
        'trigger_by': opts['triggerBy'],
        'reduce_only': opts['reduceOnly'],
        'close_on_trigger': opts['closeOnTrigger'],
        'order_link_id': opts['orderLinkId'],
        'take_profit': opts['takeProfit'],
        'stop_loss': opts['stopLoss'],
        'tp_trigger_by': opts['tpTriggerBy'],
        'sl_trigger_by': opts['slTriggerBy']
      };

      var authNames = ['apiKey', 'apiSignature', 'timestamp'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/private/linear/stop-order/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the linearConditionalQuery operation.
     * @callback module:api/LinearConditionalApi~linearConditionalQueryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Stop Orders(real-time)
     * This will get linear stop orders(real-time)
     * @param {Object} opts Optional parameters
     * @param {String} opts.symbol 
     * @param {String} opts.stopOrderId 
     * @param {String} opts.orderLinkId 
     * @param {module:api/LinearConditionalApi~linearConditionalQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.linearConditionalQuery = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'symbol': opts['symbol'],
        'stop_order_id': opts['stopOrderId'],
        'order_link_id': opts['orderLinkId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey', 'apiSignature', 'timestamp'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/private/linear/stop-order/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the linearConditionalReplace operation.
     * @callback module:api/LinearConditionalApi~linearConditionalReplaceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace conditional order
     * @param {String} symbol 
     * @param {Object} opts Optional parameters
     * @param {String} opts.stopOrderId 
     * @param {String} opts.orderLinkId 
     * @param {String} opts.pRQty 
     * @param {Number} opts.pRPrice 
     * @param {Number} opts.pRTriggerPrice 
     * @param {module:api/LinearConditionalApi~linearConditionalReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.linearConditionalReplace = function(symbol, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling linearConditionalReplace");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'symbol': symbol,
        'stop_order_id': opts['stopOrderId'],
        'order_link_id': opts['orderLinkId'],
        'p_r_qty': opts['pRQty'],
        'p_r_price': opts['pRPrice'],
        'p_r_trigger_price': opts['pRTriggerPrice']
      };

      var authNames = ['apiKey', 'apiSignature', 'timestamp'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/private/linear/stop-order/replace', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
